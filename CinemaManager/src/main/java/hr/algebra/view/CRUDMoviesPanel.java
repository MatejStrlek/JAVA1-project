/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.view;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Movie;
import hr.algebra.model.MovieArchive;
import hr.algebra.model.Person;
import hr.algebra.model.PersonTransferable;
import hr.algebra.utilities.FileUtils;
import hr.algebra.utilities.IconUtils;
import hr.algebra.utilities.JAXBUtils;
import hr.algebra.utilities.MessageUtils;
import hr.algebra.view.model.MovieTableModel;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import javax.swing.text.JTextComponent;
import javax.xml.bind.JAXBException;

/**
 *
 * @author matej.galic
 */
public class CRUDMoviesPanel extends javax.swing.JPanel {

    private static final String CRUD_MOVIES_PANEL = "Movies panel";

    private static final String FILENAME = "src/main/resources/moviearchive.xml";
    private List<Movie> movies = new ArrayList<>();
    private Set<Person> movieActors = new HashSet<>();
    private Set<Person> movieDirectors = new HashSet<>();
    private Set<Person> peopleInMovie = new HashSet<>();

    private static final String ACTOR = "ACTOR";

    /**
     * Creates new form EditMoviesPanel
     */
    public CRUDMoviesPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlActorsInDatabase = new javax.swing.JLabel();
        jlDirectorsInDatabase = new javax.swing.JLabel();
        jlTitle = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        jlPubDate = new javax.swing.JLabel();
        tfPublishedDate = new javax.swing.JTextField();
        jlDescription = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        jlDuration = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tfDuration = new javax.swing.JTextField();
        tfYear = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        lsDirectorsInDatabase = new javax.swing.JList<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        lsActorsInDatabase = new javax.swing.JList<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        lsPeopleInMovie = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        lbTitleError = new javax.swing.JLabel();
        lbPubDateError = new javax.swing.JLabel();
        lbDurationError = new javax.swing.JLabel();
        lbYearError = new javax.swing.JLabel();
        lbPeopleError = new javax.swing.JLabel();
        lbDescriptionError = new javax.swing.JLabel();
        lbImage = new javax.swing.JLabel();
        lbImageError = new javax.swing.JLabel();
        tfImagePath = new javax.swing.JTextField();
        btnImageUpload = new javax.swing.JButton();
        btnAddMovie = new javax.swing.JButton();
        btnDeleteMovie = new javax.swing.JButton();
        btnClearAll = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbMovies = new javax.swing.JTable();
        btnUpdateMovie = new javax.swing.JButton();
        btnDeletePeopleInMovie = new javax.swing.JButton();
        btnSaveXml = new javax.swing.JButton();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jlActorsInDatabase.setText("Actors in database");

        jlDirectorsInDatabase.setText("Directors in database");

        jlTitle.setText("Title");

        jlPubDate.setText("Published date");

        tfPublishedDate.setName("Date"); // NOI18N

        jlDescription.setText("Description");

        taDescription.setColumns(20);
        taDescription.setRows(5);
        jScrollPane3.setViewportView(taDescription);

        jlDuration.setText("Duration");

        jLabel2.setText("Year");

        jScrollPane4.setViewportView(lsDirectorsInDatabase);

        jScrollPane5.setViewportView(lsActorsInDatabase);

        jScrollPane1.setViewportView(lsPeopleInMovie);

        jLabel1.setText("People in movie");

        lbTitleError.setForeground(new java.awt.Color(204, 0, 0));
        lbTitleError.setText("X");

        lbPubDateError.setForeground(new java.awt.Color(204, 0, 0));
        lbPubDateError.setText("X");

        lbDurationError.setForeground(new java.awt.Color(204, 0, 0));
        lbDurationError.setText("X");

        lbYearError.setForeground(new java.awt.Color(204, 0, 0));
        lbYearError.setText("X");

        lbPeopleError.setForeground(new java.awt.Color(204, 0, 0));
        lbPeopleError.setText("X");

        lbDescriptionError.setForeground(new java.awt.Color(204, 0, 0));
        lbDescriptionError.setText("X");

        lbImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/no_image.png"))); // NOI18N

        lbImageError.setForeground(new java.awt.Color(204, 0, 0));
        lbImageError.setText("X");

        btnImageUpload.setText("Choose");
        btnImageUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImageUploadActionPerformed(evt);
            }
        });

        btnAddMovie.setBackground(new java.awt.Color(0, 204, 0));
        btnAddMovie.setForeground(new java.awt.Color(255, 255, 255));
        btnAddMovie.setText("Add");
        btnAddMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMovieActionPerformed(evt);
            }
        });

        btnDeleteMovie.setBackground(new java.awt.Color(255, 0, 0));
        btnDeleteMovie.setForeground(new java.awt.Color(255, 255, 255));
        btnDeleteMovie.setText("Delete");
        btnDeleteMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteMovieActionPerformed(evt);
            }
        });

        btnClearAll.setBackground(new java.awt.Color(255, 255, 255));
        btnClearAll.setForeground(new java.awt.Color(0, 0, 0));
        btnClearAll.setText("Clear all");
        btnClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearAllActionPerformed(evt);
            }
        });

        tbMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbMoviesMouseClicked(evt);
            }
        });
        tbMovies.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbMoviesKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tbMovies);

        btnUpdateMovie.setBackground(new java.awt.Color(51, 153, 255));
        btnUpdateMovie.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdateMovie.setText("Update");
        btnUpdateMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateMovieActionPerformed(evt);
            }
        });

        btnDeletePeopleInMovie.setBackground(new java.awt.Color(255, 0, 0));
        btnDeletePeopleInMovie.setForeground(new java.awt.Color(255, 255, 255));
        btnDeletePeopleInMovie.setText("Delete people in movie");
        btnDeletePeopleInMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePeopleInMovieActionPerformed(evt);
            }
        });

        btnSaveXml.setText("Save XML");
        btnSaveXml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveXmlActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlDescription)
                            .addComponent(jlDuration)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lbDurationError, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lbDescriptionError, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(tfPublishedDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                                    .addComponent(jlTitle, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jlPubDate, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfTitle, javax.swing.GroupLayout.Alignment.LEADING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbPubDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbPeopleError, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnDeletePeopleInMovie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(163, 163, 163)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jlActorsInDatabase)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlDirectorsInDatabase)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(90, 90, 90))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfYear)
                            .addComponent(btnAddMovie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDeleteMovie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnClearAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnUpdateMovie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSaveXml, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbImageError, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbYearError, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfImagePath, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnImageUpload))
                            .addComponent(lbImage))
                        .addGap(49, 49, 49)
                        .addComponent(jScrollPane2)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jlTitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jlPubDate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfPublishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbPubDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jlDescription)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbDescriptionError, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jlDuration)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbDurationError, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbPeopleError, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDeletePeopleInMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jlDirectorsInDatabase)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jlActorsInDatabase)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbYearError, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addComponent(btnAddMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdateMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnDeleteMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(btnClearAll, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(lbImageError))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(btnSaveXml, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbImage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfImagePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnImageUpload))))
                .addContainerGap(97, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
        clearForm();
    }//GEN-LAST:event_formComponentShown

    private void btnAddMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMovieActionPerformed
        if (!formValid()) {
            return;
        }
        addMovie();
    }//GEN-LAST:event_btnAddMovieActionPerformed

    private void btnClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearAllActionPerformed
        clearForm();
    }//GEN-LAST:event_btnClearAllActionPerformed

    private void btnImageUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImageUploadActionPerformed
        File file = FileUtils.uploadFile("Images", "jpg", "jpeg", "png");
        if (file == null) {
            return;
        }
        tfImagePath.setText(file.getAbsolutePath());
        setIcon(lbImage, file);
    }//GEN-LAST:event_btnImageUploadActionPerformed

    private void tbMoviesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbMoviesKeyReleased
        showMovie();
    }//GEN-LAST:event_tbMoviesKeyReleased

    private void tbMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbMoviesMouseClicked
        showMovie();
    }//GEN-LAST:event_tbMoviesMouseClicked

    private void btnUpdateMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateMovieActionPerformed
        if (selectedMovie == null) {
            MessageUtils.showInformationMessage(CRUD_MOVIES_PANEL, "Choose movie bro!");
            return;
        }

        if (!formValid()) {
            return;
        }

        updateMovie();
    }//GEN-LAST:event_btnUpdateMovieActionPerformed

    private void btnDeletePeopleInMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePeopleInMovieActionPerformed
        if (peopleModel.getSize() == 0) {
            return;
        }
        try {
            if (selectedMovie != null && !repository.selectPeopleInMovie(selectedMovie.getId()).isEmpty()) {
                repository.deletePeopleInMovie(selectedMovie.getId());
            }
            clearPeople();
        } catch (Exception ex) {
            Logger.getLogger(CRUDMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showInformationMessage(CRUD_MOVIES_PANEL, ex.getMessage());
        }

    }//GEN-LAST:event_btnDeletePeopleInMovieActionPerformed

    private void btnDeleteMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteMovieActionPerformed
        if (selectedMovie == null) {
            MessageUtils.showInformationMessage(CRUD_MOVIES_PANEL, "Choose movie bro!");
            return;
        }

        deleteMovies();
    }//GEN-LAST:event_btnDeleteMovieActionPerformed

    private void btnSaveXmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveXmlActionPerformed
        try {
            peopleInMovie = repository.selectPeopleInMovie(selectedMovie.getId());
        } catch (Exception ex) {
            Logger.getLogger(CRUDMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

        for (Person person : peopleInMovie) {
            if (person.getRole().name().equals(ACTOR)) {
                movieActors.add(person);
            } else {
                movieDirectors.add(person);
            }
        }

        MovieArchive movieArchive = new MovieArchive(movies);

        Movie movieForXmlDownload = new Movie(
                selectedMovie.getId(),
                selectedMovie.getTitle(),
                selectedMovie.getPublishedDate(),
                selectedMovie.getDescription(),
                selectedMovie.getPicturePath(),
                selectedMovie.getDuration(),
                selectedMovie.getYear(),
                movieActors,
                movieDirectors
        );

        movies.add(movieForXmlDownload);

        try {
            JAXBUtils.save(movieArchive, FILENAME);
        } catch (JAXBException ex) {
            Logger.getLogger(CRUDMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSaveXmlActionPerformed

    private void deleteMovies() {
        if (MessageUtils.showConfirmDialog("Delete movie?", "Do you want to delete this movie?")) {
            try {
                if (selectedMovie.getPicturePath() != null) {
                    Files.deleteIfExists(
                            Paths.get(selectedMovie.getPicturePath()));
                }

                repository.deletePeopleInMovie(selectedMovie.getId());
                repository.deleteMovie(selectedMovie.getId());
                movieTableModel.setMovies(repository.selectMovies());
                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(CRUDMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void clearPeople() {
        peopleModel.clear();
        people.clear();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddMovie;
    private javax.swing.JButton btnClearAll;
    private javax.swing.JButton btnDeleteMovie;
    private javax.swing.JButton btnDeletePeopleInMovie;
    private javax.swing.JButton btnImageUpload;
    private javax.swing.JButton btnSaveXml;
    private javax.swing.JButton btnUpdateMovie;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel jlActorsInDatabase;
    private javax.swing.JLabel jlDescription;
    private javax.swing.JLabel jlDirectorsInDatabase;
    private javax.swing.JLabel jlDuration;
    private javax.swing.JLabel jlPubDate;
    private javax.swing.JLabel jlTitle;
    private javax.swing.JLabel lbDescriptionError;
    private javax.swing.JLabel lbDurationError;
    private javax.swing.JLabel lbImage;
    private javax.swing.JLabel lbImageError;
    private javax.swing.JLabel lbPeopleError;
    private javax.swing.JLabel lbPubDateError;
    private javax.swing.JLabel lbTitleError;
    private javax.swing.JLabel lbYearError;
    private javax.swing.JList<Person> lsActorsInDatabase;
    private javax.swing.JList<Person> lsDirectorsInDatabase;
    private javax.swing.JList<Person> lsPeopleInMovie;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTable tbMovies;
    private javax.swing.JTextField tfDuration;
    private javax.swing.JTextField tfImagePath;
    private javax.swing.JTextField tfPublishedDate;
    private javax.swing.JTextField tfTitle;
    private javax.swing.JTextField tfYear;
    // End of variables declaration//GEN-END:variables

    private List<JTextComponent> validationFields;
    private List<JLabel> errorLabels;

    private Repository repository;

    private MovieTableModel movieTableModel;

    private Movie selectedMovie;

    private List<Person> actors;
    private List<Person> directors;
    private Set<Person> people = new HashSet<>();

    private final DefaultListModel<Person> actorsModel = new DefaultListModel<>();
    private final DefaultListModel<Person> directorsModel = new DefaultListModel<>();
    private final DefaultListModel<Person> peopleModel = new DefaultListModel<>();

    private static final String DIR = "assets";

    private void init() {
        try {
            initValidation();
            initRepository();
            hideErrors();
            loadLists();
            initTable();
            initDragNDrop();
        } catch (Exception ex) {
            Logger.getLogger(CRUDMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage(CRUD_MOVIES_PANEL, "Cannot initiate the form");
            System.exit(1);
        }
    }

    private void initRepository() {
        repository = RepositoryFactory.getRepository();
    }

    private void hideErrors() {
        errorLabels.forEach(e -> e.setVisible(false));
        lbPeopleError.setVisible(false);
    }

    private void initValidation() {
        validationFields = Arrays.asList(
                tfTitle,
                tfPublishedDate,
                taDescription,
                tfDuration,
                tfYear,
                tfImagePath
        );

        errorLabels = Arrays.asList(
                lbTitleError,
                lbPubDateError,
                lbDescriptionError,
                lbDurationError,
                lbYearError,
                lbImageError
        );
    }

    private boolean formValid() {
        hideErrors();
        boolean ok = true;

        for (int i = 0; i < validationFields.size(); i++) {
            ok &= !validationFields.get(i).getText().trim().isEmpty();
            errorLabels.get(i).setVisible(validationFields.get(i).getText().trim().isEmpty());

            if ("Date".equals(validationFields.get(i).getName())) { // valid input pattern: 2017-08-21T19:00:00
                try {
                    LocalDate.parse(validationFields.get(i).getText().trim(), Movie.DATE_FORMATTER);
                } catch (Exception e) {
                    ok = false;
                    errorLabels.get(i).setVisible(true);
                }
            }

        }

        if (lsPeopleInMovie.getModel().getSize() == 0) {
            lbPeopleError.setVisible(true);
            ok = false;
        }

        if (!isNumeric(tfDuration.getText())) {
            lbDurationError.setVisible(true);
            ok = false;
        }

        if (!isNumeric(tfYear.getText())) {
            lbYearError.setVisible(true);
            ok = false;
        }

        return ok;
    }

    private void clearForm() {
        hideErrors();
        validationFields.forEach(e -> e.setText(""));
        lbImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/no_image.png")));
        clearPeople();
        selectedMovie = null;
    }

    private void addMovie() {
        try {
            String localPicturePath = uploadPicture();
            Movie movie = new Movie(
                    tfTitle.getText().trim(),
                    LocalDateTime.parse(
                            tfPublishedDate.getText().trim(),
                            Movie.DATE_FORMATTER),
                    taDescription.getText().trim(),
                    localPicturePath,
                    Integer.parseInt(tfDuration.getText().trim()),
                    Integer.parseInt(tfYear.getText().trim())
            );

            int createdMovie = repository.createMovie(movie);

            if (createdMovie > 0) {
                MessageUtils.showInformationMessage(CRUD_MOVIES_PANEL, "Successfully created movie!");
                repository.createPeopleInMovie(createdMovie, people);
            } else {
                MessageUtils.showErrorMessage(CRUD_MOVIES_PANEL, "Some Error!");
            }

            movieTableModel.setMovies(repository.selectMovies());
            clearForm();

        } catch (Exception ex) {
            Logger.getLogger(CRUDPeoplePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void updateMovie() {
        try {
            if (!tfImagePath.getText()
                    .equals(selectedMovie.getPicturePath())) {
                if (selectedMovie.getPicturePath() != null) {
                    Files.deleteIfExists(
                            Paths.get(selectedMovie.getPicturePath())
                    );
                }
                String localPicturePath = uploadPicture();
                selectedMovie.setPicturePath(localPicturePath);
            }

            selectedMovie.setTitle(tfTitle.getText().trim());
            selectedMovie.setPublishedDate(LocalDateTime.parse(
                    tfPublishedDate.getText().trim(),
                    Movie.DATE_FORMATTER));
            selectedMovie.setDescription(taDescription.getText().trim());
            selectedMovie.setDuration(
                    Integer.parseInt(tfDuration.getText().trim()));
            selectedMovie.setYear(
                    Integer.parseInt(tfYear.getText().trim()));

            repository.updateMovie(selectedMovie.getId(), selectedMovie);
            movieTableModel.setMovies(repository.selectMovies());

            updatePeopleInMovie();

            clearForm();
            MessageUtils.showInformationMessage(CRUD_MOVIES_PANEL, "Movie updated!");
        } catch (Exception ex) {
            Logger.getLogger(CRUDPeoplePanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showInformationMessage(CRUD_MOVIES_PANEL, "ovdje");
        }
    }

    private void loadLists() {
        try {
            loadActors();
            loadDirectors();
        } catch (Exception ex) {
            Logger.getLogger(CRUDMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadActors() throws Exception {
        actorsModel.clear();

        actors = repository.selectActors();

        for (Person actor : actors) {
            actorsModel.addElement(actor);
        }

        lsActorsInDatabase.setModel(actorsModel);
    }

    private void loadDirectors() throws Exception {
        directorsModel.clear();

        directors = repository.selectDirectors();

        for (Person director : directors) {
            directorsModel.addElement(director);
        }

        lsDirectorsInDatabase.setModel(directorsModel);
    }

    private void loadPeopleModel() {
        peopleModel.clear();
        System.out.println("People List Contents: " + people);
        people.forEach(peopleModel::addElement);
        lsPeopleInMovie.setModel(peopleModel);
    }

    private void initDragNDrop() {
        dndActors();
        dndDirectors();

        lsPeopleInMovie.setDropMode(DropMode.ON);
        lsPeopleInMovie.setTransferHandler(new ImportHandler());
    }

    private void dndActors() {
        lsActorsInDatabase.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsActorsInDatabase.setDragEnabled(true);
        lsActorsInDatabase.setTransferHandler(new ExportActorsHandler());
    }

    private void dndDirectors() {
        lsDirectorsInDatabase.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsDirectorsInDatabase.setDragEnabled(true);
        lsDirectorsInDatabase.setTransferHandler(new ExportDirectorsHandler());
    }

    private void initTable() throws Exception {
        tbMovies.setRowHeight(25);
        tbMovies.setAutoCreateRowSorter(true);
        tbMovies.setSelectionMode(
                ListSelectionModel.SINGLE_SELECTION);

        movieTableModel = new MovieTableModel(
                repository.selectMovies());
        tbMovies.setModel(movieTableModel);
    }

    private boolean isNumeric(String text) {
        try {
            Integer.valueOf(text);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    private String uploadPicture() throws IOException {
        String picturePath = tfImagePath.getText();
        String ext = picturePath.substring(
                picturePath.lastIndexOf("."));
        String pictureName = UUID.randomUUID() + ext;
        String localPath = DIR + File.separator + pictureName;
        FileUtils.copy(picturePath, localPath);

        return localPath;
    }

    private void showMovie() {
        clearForm();

        int selectedRow = tbMovies.getSelectedRow();
        int rowIndex = tbMovies.convertRowIndexToModel(selectedRow);
        int movieId = (int) movieTableModel.getValueAt(rowIndex, 0);

        try {
            Optional<Movie> opt = repository.selectMovie(movieId);
            if (opt.isPresent()) {
                selectedMovie = opt.get();
                fillForm(selectedMovie);
                fillLsPeopleInMovie(movieId);
            }
        } catch (Exception ex) {
            Logger.getLogger(CRUDMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void fillForm(Movie movie) {
        tfTitle.setText(movie.getTitle());
        tfPublishedDate.setText(movie.getPublishedDate().format(
                Movie.DATE_FORMATTER
        ));
        taDescription.setText(movie.getDescription());
        tfDuration.setText(movie.getDuration() + "");
        tfYear.setText(movie.getYear() + "");

        if (movie.getPicturePath() != null
                && Files.exists(Paths.get(movie.getPicturePath()))) {
            tfImagePath.setText(movie.getPicturePath());
            setIcon(lbImage, new File(movie.getPicturePath()));
        }

    }

    private void setIcon(JLabel label, File file) {
        try {
            label.setIcon(IconUtils.createIcon(file, label.getWidth(), label.getHeight()));
        } catch (IOException ex) {
            Logger.getLogger(CRUDMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage(CRUD_MOVIES_PANEL, "Unable to set icon!");
        }
    }

    private void fillLsPeopleInMovie(int movieId) throws Exception {
        people = repository.selectPeopleInMovie(movieId);
        loadPeopleModel();
    }

    private void updatePeopleInMovie() throws Exception {
        repository.deletePeopleInMovie(selectedMovie.getId());
        repository.createPeopleInMovie(selectedMovie.getId(), people);
    }

    private class ExportActorsHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        protected Transferable createTransferable(JComponent c) {
            return new PersonTransferable(lsActorsInDatabase.getSelectedValue());
        }

    }

    private class ExportDirectorsHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        protected Transferable createTransferable(JComponent c) {
            return new PersonTransferable(lsDirectorsInDatabase.getSelectedValue());
        }

    }

    private class ImportHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferSupport support) {
            return support.isDataFlavorSupported(PersonTransferable.PERSON_FLAVOUR);
        }

        @Override
        public boolean importData(TransferSupport support) {
            Transferable transferable = support.getTransferable();

            try {
                Person person = (Person) transferable.getTransferData(PersonTransferable.PERSON_FLAVOUR);

                if (people.add(person)) {
                    loadPeopleModel();
                    return true;
                }

            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(CRUDMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

            return false;
        }

    }

}
